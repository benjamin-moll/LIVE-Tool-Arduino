#include <Adafruit_NeoPixel.h>

const int joyH = 0;
const int joyV = 1;

#define overhead  2
#define front  3
#define stp 11
#define dir 12
#define MS1 4
#define MS2 5
#define EN  6

char user_input;
int x;
int y;
int state;

int moveState = 0;

int oh_bright = 0;
int fr_bright = 0;

boolean motormove =false;


Adafruit_NeoPixel oh(1, overhead, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel fr(1, front, NEO_GRB + NEO_KHZ800);

void setup() {
  Serial.begin(9600);
  pinMode(stp, OUTPUT);
  pinMode(dir, OUTPUT);
  pinMode(MS1, OUTPUT);
  pinMode(MS2, OUTPUT);
  pinMode(EN, OUTPUT);
  resetEDPins();
  oh.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  oh.show();            // Turn OFF all pixels ASAP

  fr.begin();
  fr.show();

}

void loop() {
  readJoystick();

  if (Serial.available() > 0) { // if there's serial data available
    //if(motormove==true){
    //front motor light control
      user_input = Serial.read(); //Read user input and trigger appropriate function
      digitalWrite(EN, LOW); //Pull enable pin low to allow motor control
      if (user_input =='z')
      {
         StepForwardDefault();
         //motormove = false;
      }
      else if(user_input =='x')
      {
        ReverseStepDefault();
        //motormove = false;
      }
      else if(user_input =='v')
      {
        SmallStepMode();
        //motormove = false;
        
      }
      else if(user_input =='b')
      {
        ForwardBackwardStep();
        //motormove = false;
        
      }
      else if (user_input == 'n'){
        SmallStepReverse();
        //motormove = false;
        
      }
      
    //}
  //else{
    
    //string to read brightness val for OH Light
    String inByte1 = Serial.readStringUntil('A');   
    //string to read brightness val for FR light
    String inByte2 = Serial.readStringUntil('B');
    //string to read r % val for OH Light
    String inByte3 = Serial.readStringUntil('C');
    //string to read g % val for OH Light
    String inByte4 = Serial.readStringUntil('D');
    //string to read b% val for OH Light
    String inByte5 = Serial.readStringUntil('E');
     //string to read r % val for FR Light
     String inByte6 = Serial.readStringUntil('F');
    //string to read g % val for FR Light
    String inByte7 = Serial.readStringUntil('G');
    //string to read b% val for FR Light
    String inByte8 = Serial.readStringUntil('H');

    //convert these values back to Ints
    
    int oh_bright = inByte1.toInt();
    int fr_bright = inByte2.toInt();
    int oh_r = inByte3.toInt();
    int oh_g = inByte4.toInt();
    int oh_b = inByte5.toInt();
    int fr_r = inByte6.toInt();
    int fr_g = inByte7.toInt();
    int fr_b = inByte8.toInt();

//    oh.setBrightness(50);
//    oh.setPixelColor(0,50,50,50);

//    fr.setBrightness(50);
//    fr.setPixelColor(0,50,50,50);
    
    //set brightness values and colors as read in
    oh.setBrightness(oh_bright);
    oh.setPixelColor(0,oh_r, oh_g,oh_b);
    fr.setBrightness(fr_bright);
    fr.setPixelColor(0,fr_r, fr_g,fr_b);


   //update the pixel displays and wait briefly
    oh.show();
    fr.show();
    
  //}
    
    resetEDPins();
  }


}


void readJoystick(){
  //joyH = left or right, 0 left, 1023 right
    int leftright = analogRead(joyH);
    
    //joyV = up or down, 0 down, 1023 up
    int updown = analogRead(joyV);
    
    if(leftright <= 200){
      //Serial.println("move left");
      moveState = 1;
    }
    else if (leftright >=900){
      //Serial.println("move right");
      moveState = 2;
    }
    else if(updown <= 200){
      //Serial.println("move down");
      moveState = 3;
    }
    else if (updown >=900){
      //Serial.println("move up");
      moveState = 4;
    }

  
  if(moveState == 1){
    Serial.println("move left");
    moveState=0;
    delay(1000);
  }

  else if(moveState == 2){
    Serial.println("move right");
    moveState=0;
    delay(1000);
  }
  else if(moveState == 3){
    Serial.println("move down");
    moveState=0;
    delay(1000);
  }
  else if(moveState == 4){
    Serial.println("move up");
    moveState=0;
    delay(1000);
  }

 
}

void joystickReset(){
    moveState =0;
  
}


void resetEDPins()
{
  digitalWrite(stp, LOW);
  digitalWrite(dir, LOW);
  digitalWrite(MS1, LOW);
  digitalWrite(MS2, LOW);
  digitalWrite(EN, HIGH);
}

//Default microstep mode function
void StepForwardDefault()
{
  //Serial.println("Moving forward at default step mode.");
  motormove = true;
  digitalWrite(dir, LOW); //Pull direction pin low to move "forward"
  for(x= 0; x<1000; x++)  //Loop the forward stepping enough times for motion to be visible
  {
    digitalWrite(stp,HIGH); //Trigger one step forward
    delay(1);
    digitalWrite(stp,LOW); //Pull step pin low so it can be triggered again
    delay(1);
  }
  //Serial.println("Enter new option");
  //Serial.println();
  
}

//Reverse default microstep mode function
void ReverseStepDefault()
{
  //Serial.println("Moving in reverse at default step mode.");
  motormove=true;
  digitalWrite(dir, HIGH); //Pull direction pin high to move in "reverse"
  for(x= 0; x<1000; x++)  //Loop the stepping enough times for motion to be visible
  {
    digitalWrite(stp,HIGH); //Trigger one step
    delay(1);
    digitalWrite(stp,LOW); //Pull step pin low so it can be triggered again
    delay(1);
  }
  //Serial.println("Enter new option");
  //Serial.println();
}

// 1/8th microstep foward mode function
void SmallStepMode()
{
  //Serial.println("Stepping at 1/8th microstep mode.");
  motormove = true;
  digitalWrite(dir, LOW); //Pull direction pin low to move "forward"
  digitalWrite(MS1, HIGH); //Pull MS1, and MS2 high to set logic to 1/8th microstep resolution
  digitalWrite(MS2, HIGH);
  for(x= 0; x<1000; x++)  //Loop the forward stepping enough times for motion to be visible
  {
    digitalWrite(stp,HIGH); //Trigger one step forward
    delay(1);
    digitalWrite(stp,LOW); //Pull step pin low so it can be triggered again
    delay(1);
  }
  //Serial.println("Enter new option");
  //Serial.println();
}


void SmallStepReverse()
{
  //Serial.println("Stepping at 1/8th microstep mode.");
  motormove = true;
  digitalWrite(dir, HIGH); //Pull direction pin low to move "forward"
  digitalWrite(MS1, HIGH); //Pull MS1, and MS2 high to set logic to 1/8th microstep resolution
  digitalWrite(MS2, HIGH);
  for(x= 0; x<1000; x++)  //Loop the forward stepping enough times for motion to be visible
  {
    digitalWrite(stp,HIGH); //Trigger one step forward
    delay(1);
    digitalWrite(stp,LOW); //Pull step pin low so it can be triggered again
    delay(1);
  }
  //Serial.println("Enter new option");
  //Serial.println();
}

//Forward/reverse stepping function
void ForwardBackwardStep()
{
  //Serial.println("Alternate between stepping forward and reverse.");
  motormove= true;
  for(x= 1; x<5; x++)  //Loop the forward stepping enough times for motion to be visible
  {
    //Read direction pin state and change it
    state=digitalRead(dir);
    if(state == HIGH)
    {
      digitalWrite(dir, LOW);
    }
    else if(state ==LOW)
    {
      digitalWrite(dir,HIGH);
    }
    
    for(y=0; y<1000; y++)
    {
      digitalWrite(stp,HIGH); //Trigger one step
      delay(1);
      digitalWrite(stp,LOW); //Pull step pin low so it can be triggered again
      delay(1);
    }
  }
  //Serial.println("Enter new option:");
  //Serial.println();
}
